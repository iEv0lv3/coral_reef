# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH

# Enable Nerfonts Complete for Powerlevel9k
POWERLEVEL9K_MODE='nerdfont-complete'

# Path to your oh-my-zsh installation.
export ZSH="/Users/jww/.oh-my-zsh"

# Poetry for Python
export PATH="$HOME/.poetry/bin:$PATH"

# ZSH Theme
ZSH_THEME="powerlevel9k/powerlevel9k"

# Powerlevel9k Prompt Settings
POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(user virtualenv dir vcs)
POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=(status root_indicator background_jobs os_icon pyenv rbenv)

POWERLEVEL9K_PROMPT_ADD_NEWLINE=true
# POWERLEVEL9K_PROMPT_ON_NEWLINE=true

POWERLEVEL9K_USER_DEFAULT_BACKGROUND='016'
POWERLEVEL9K_USER_DEFAULT_FOREGROUND='251'
POWERLEVEL9K_DIR_HOME_BACKGROUND='250'
POWERLEVEL9K_DIR_HOME_FOREGROUND='000'
POWERLEVEL9K_DIR_HOME_SUBFOLDER_BACKGROUND='33'
POWERLEVEL9K_DIR_HOME_SUBFOLDER_FOREGROUND='000'

# Powerlevel9k VCS
POWERLEVEL9K_VCS_CLEAN_FOREGROUND='000'
POWERLEVEL9K_VCS_CLEAN_BACKGROUND='028'
POWERLEVEL9K_VCS_UNTRACKED_FOREGROUND='000'
POWERLEVEL9K_VCS_UNTRACKED_BACKGROUND='124'
POWERLEVEL9K_VCS_MODIFIED_FOREGROUND='000'
POWERLEVEL9K_VCS_MODIFIED_BACKGROUND='178'

POWERLEVEL9K_PYENV_PROMPT_ALWAYS_SHOW="true"

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
# DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to automatically update without prompting.
# DISABLE_UPDATE_PROMPT="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS=true

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in ~/.oh-my-zsh/plugins/*
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(git)

source $ZSH/oh-my-zsh.sh

# Ruby + Rails
alias bers='bundle exec rspec'
alias nodep="RUBYOPT='-W:no-deprecated'"
alias yolo="rake db:{drop,create,migrate,seed}"

# PostgreSQL with Brew
alias spsql="brew services start postgresql"
alias xpsql="brew services stop postgresql"

# MySQL with Brew
alias smysql="brew services start mysql"
alias xmysql="brew services stop mysql"

# MongoDB with Brew
alias smongo="brew services start mongodb-community"
alias xmongo="brew services stop mongodb-community"

# Elasticsearch with Brew
alias selastic="brew services start elasticsearch-full"
alias xelastic="brew services stop elasticsearch-full"

# Elasticsearch with Brew
alias selastic="brew services start redis"
alias xelastic="brew services stop redis"

# SimpleCov
alias showcov="open coverage/index.html"

# Search terminal history
alias search="history | grep"

# Run Google Cloud Build
alias gcb="gcloud builds submit --config cloudbuild.yaml"

# Snowflake SnowSQL
alias snowsql="/Applications/SnowSQL.app/Contents/MacOS/snowsql"

# Meltano :: Docker command
alias meltanod="docker run --interactive -v $(pwd):/projects -w /projects meltano/meltano:latest-python3.8"

# Edit .zshrc config
alias editzsh="code . /Users/jww/.zshrc"

# Enable Docker commands in Minikube.
alias minidoc="eval $(minikube docker-env)"

# Run Pytest with Coverage. Run with: $1 = pyt package_name
pyt() {
  pytest --cov-report term-missing --cov=$1 tests/
}

# Set the GCP project id
# $1 = project id
gcpid() {
  export PROJECT_ID=$1
}

# Set active GCP project
# $1 = project id
gcproject() {
  gcloud config set project $1
}

# Authenticate cluster
# $1 = cluster name
# $2 = zone
gcpcluster() {
  gcloud container clusters get-credentials $1 --zone=$2
}

# Copy Kubernetes secret from one cluster to another.
# $1 = secret name
# $2 = source cluster
# $3 = destination cluster
kscopy() {
  kubectl get secret $1 --context $2 -o yaml | kubectl apply --context $3 -f -
}

# Create new Kubernetes secret from a file.
# $1 = secret name
# $2 = secret key
# $3 = file path
ksfile() {
  kubectl create secret generic $1 --from-file=$2=$3
}

# Create new Kubernetes secret literal.
# $1 = secret name
# $2 = secret key
# $3 = secret value
ksliteral() {
  kubectl create secret generic $1 --from-literal $2=$3
}

# Create new Kubernetes secret from .env file
# $1 = secret name
# $2 = file path
ksenv() {
  kubectl create secret generic $1 --from-env-file $2
}

# Build a new Docker image
# $1 = image name
# $2 = image tag
dbuild() {
  docker build --no-cache --tag $1:$2 .
}

# GCR tag image
# $1 = image name
# $2 = image tag
# $3 = GCP project id
gcrtag() {
  docker tag $1:$2 gcr.io/$3/$1:$2
}

# GCR push image
# $1 = image name
# $2 = image tag
# $3 = GCP project id
gcrpush() {
  docker push gcr.io/$3/$1:$2
}

# Launch Airbyte locally
airbytestart() {
  kubectl port-forward svc/airbyte-webapp-svc 8000:80
}

# Airbyte :: Build Source
# $1 = source name
airbytebuild() {
  docker build . -t airbyte/source-$1:dev
}

# Check Airbyte Spec
# $1 = source name
airbytespec() {
  docker run --rm airbyte/source-$1:dev spec
}

# Check Airbyte Config
# $1 = source name
airbyteconfig() {
  docker run --rm -v $(pwd)/secrets:/secrets airbyte/source-$1:dev check --config /secrets/config.json
}

# Check Airbyte Discover
# $1 = source name
airbytediscover() {
  docker run --rm -v $(pwd)/secrets:/secrets airbyte/source-$1:dev discover --config /secrets/config.json
}

# Check Airbyte Source
# $1 = source name
airbytesource() {
  docker run --rm -v $(pwd)/secrets:/secrets -v $(pwd)/sample_files:/sample_files airbyte/source-$1:dev read --config /secrets/config.json --catalog /sample_files/configured_catalog.json
}

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# added by Snowflake SnowSQL installer v1.2
export PATH=/Applications/SnowSQL.app/Contents/MacOS:$PATH

# kubectl autocomplete
[[ /Users/jww/google-cloud-sdk/bin/kubectl ]] && source <(kubectl completion zsh)

# The next line updates PATH for the Google Cloud SDK.
if [ -f '/Users/jww/google-cloud-sdk/path.zsh.inc' ]; then . '/Users/jww/google-cloud-sdk/path.zsh.inc'; fi

# The next line enables shell command completion for gcloud.
if [ -f '/Users/jww/google-cloud-sdk/completion.zsh.inc' ]; then . '/Users/jww/google-cloud-sdk/completion.zsh.inc'; fi

eval "$(pyenv init --path)"
eval "$(rbenv init -)"

autoload -U +X bashcompinit && bashcompinit
complete -o nospace -C /usr/local/bin/terraform terraform
